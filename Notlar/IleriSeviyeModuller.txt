####################################################################################################################################################################################################################################################################################################################################

////datetime modulü.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import datetime ile import ederiz... datetime'ı direkt olarak kullanmak istersek eğer from datetime import datetime yaparız.

result = dir(datetime) 
print(result) # tüm metotları vs görebiliriz.

datetime tarih(gün ay yıl) zaman(saat dakika saniye). date tarih. time ise zaman tutar.

..........................................................
from datetime import datetime
now = datetime.now()
print(now) # şu anın tarihi ve zaman bilgisi gelir.
    bu bilgi içerisinden istediğimiz bölümleri alabiliriz.
    now.year ile yıl(datetime.now().year) 
    now.month ile ay(datetime.now().month)
    now.day ile gün bilgisi datetime.now().day
    now.hour ile saat(datetime.now().hour)
    now.minute ile dakika datetime.now().minute
    now.second ile saniye datetime.now().second

...........................................................

import datetime

print(datetime.datetime.now().year)
print(datetime.datetime.now().month)
print(datetime.datetime.now().day)
print(datetime.datetime.now().hour)
print(datetime.datetime.now().minute)
print(datetime.datetime.now().second)

print(datetime.datetime.strftime(datetime.datetime.now(),'%Y-%B-%A %H:%M:%S')) #2023-April-Sunday 10:44:19

..........................................................
from datetime import datetime
now = datetime.now()
result = datetime.ctime(now)
print(result) #Sat Apr  1 06:56:43 2023 ... mesela bu şekilde verir bize düzgün bir halde gelir yapılar.
..........................................................
from datetime import datetime
now = datetime.now()
result = datetime.strftime(now,'%Y-%B-%A %H:%M:%S') # veya now yerine datetime.now() koyabiliriz veya başka bir elde olan zaman dilimini kafamızdaki formata göre yazdırabiliriz.
print(result) # yazdıracağımız değeri istediğimiz gibi belirleyebiliriz.
.........................................................
from datetime import datetime

mesela elimizde belirli bir zaman var mesela t = '15 April 2019 hour 10:12:30'
dt = datetime.strptime(t,'%d %B %Y hour %H:%M:%S') # burada olan şey elde olan veriyi kendi istediğimiz biçimde belirleriz. mesela hour bir yere atanmayacak ve öylece istediğimiz değerler istenen sonucu olacak. 
print(dt) # vermiş olduğumuz string ifadeyi kendisi çözümledi.

print(dt.year) # ile yıl bilgisine ulaşırız.
print(dt.month) #ile ay bilgisine ulaşırız. 
.........................................................

from datetime import datetime
birthday = datetime(1983,5,12) #ne kadar değer verirsek sırası ile onları alıri.
birthday1 = datetime(1983,5,12,12,30,60) # bu sefer saat kısmıda dahil olur. bir değer daha girersek mikrosaniye devreye girer vs.

result = datetime.timestamp(birthday) # ilgili değer saniye cinsinden gelir.
result1 = datetime.fromtimestamp(result) # saniye değeri ile tarih ve zaman elde edilir.

result2 = datetime.fromtimestamp(0)
print(result2) #  1970-01-01 03:00:00 bu bilgisayarların milatı olarak kabul edilir mesela bir zaman girdik ve ne kadar zaman geçmiş baktık bu tarihten itibaren geçen zamana bakacak.

result3 = birthday1 - birthday ile aradaki zamanı görebiliriz. (timedelta olarak gelir.)
print(result3.days) # toplam aradaki gün bilgisi gelir.
print(result3.seconds) # toplam saniye.

.........................................................

from datetime import datetime
from datetime import timedelta

simdi = datetime.now()
result = simdi + timedelta(days = 100,seconds = 20) # 100 gün ve 20 saniye sonrasını elde edebiliriz. 
print(result) # böylece ileri bir tarihi görebiliriz - ile işlem yaparsak geri tarihi görebiliriz.

.........................................................

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////os modulü.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

dir(modul,class,vs) ile biz içine koyulanın metotlarını classlarını vs görebiliriz.

import os # ile import ederiz. os ile dosya işletim sistemi gibi olayların işlemlerini yaparız.
    klasör oluşturma adını değiştirme vs yapabiliriz.
    

result = dir(os)
print(result) # tüm mettoları classları vs görebiliriz.

result1 = os.name #bununla işletim sisteminin adını bulabiliriz.
result2 = os.getcwd() #bununla işlem yaptığımız python dosyasının hangi klasör'de olduğunu görürüz. klasörün dizini ile.

os.mkdir("newdirectory") # bunu yaparsak eğer python dosyasının pathinde bir newdirectory isminde bir klasör oluşturur.
    eğer os.chdir('C:\\') yaparsak eğer işletim sistemi path'i verdiğimiz yol olarak kabul eder. ama değişim yapmazsak eğer default olarak pyhon dosyasının bulunduğu yolu referans alır.
    
os.chdir('..') # bunu yaparsak eğer bir geri gideriz path'de cd .. demek gibi iki kere geri gitmek istersek eğer üst üste os.chdir('..') yapabiliriz veya os.chdir('../..') yapabiliriz.
.........................................................
os.makedirs("newdirectory/yeniklasör/yeniklasör1") yaparsak iç içe klasörler oluşturabiliriz. başlangıç noktası ise os'un path'i olur... yani newdirectory path üzerinde oluşur öbürleri iç içe girer.
.........................................................
os.makedirs("C:\\newdirectory/yeniklasör/yeniklasör1") # böyle ise C dizini altında iç içe klasörler oluşturabiliriz.
.........................................................
result = os.listdir()
print(result)  # bu durumda listdir() bize path üzerinde olanları getirecek.

for dosya in os.listdir(): #bir liste döndüğü için iterasyon yapabiliriz.
    if dosya.endswith(".py"):
       print(dosya)

    #böylece sadece python dosyalarını görebiliriz...
.........................................................

import os

result = os.listdir("C:\\") # c dizini içerisindeki her şeyi bize getirecek. yani hangi dizini verirsek onun üzerinde bulununları bir liste halinde bize return eder.
print(result) # bir liste elde edeceğiz.

.........................................................
result = os.stat("newdirectory"(dosyaadi)) # bulunan path üzerinde olmalıdır.
print(result) #bize bu dosyanın özelliklerini gönderir. return eder yani.

result1 = result.st_size / 1024 # byte cinsinden dğeer döner bu dosyanın değerini döner. 1024'e bölersek ise o zaman kaç mb olduğunu görürüz.

result2 = result.st_ctime # .st_ctime(oluşturulma tarihi) , .st_mtime(değiştirilme tarihi) , .st_atime(son değiştirilme tarihi) 
result2 = datetime.datetime.fromtimestamp(result2) # böylece ne zaman oluştuğunu görürüz.


result = os.listdir()
for i in result: # böylece bulunan path üzerindeki tüm dosyaların özelliklerine erişebiliriz.
    print(os.stat(i))
    print(".........................................") 

.........................................................
os.system("notepad.exe") # system ile istenen dosyaları vs çalıştırabiliriz.
.........................................................
os.rename("newdirectory","yeniklasör") # newdirectory yeniklasör olur. rename ile isim değişikliği yapabiliriz.
.........................................................
os.rmdir("newdirectory") # eğer alt klasörü yoksa çalışır.
.........................................................
os.removedirs("newdirectory/yeniklasör") # çoklu klasör silme.
.........................................................
import os

os.mkdir("honda.txt")
os.rename("honda.txt","fordfocus.txt")
os.rmdir("fordfocus.txt")

# önce oluşturduk adını değiştirdik sonra ise sildik.


PATH.........................................................
import os

result = os.path.abspath("first.py") #biz bir dosyanın konumu verdik. bize tam konumu return etti.
result = os.path.dirname(result) # dirname ile ise tam konumu verilen dosyanın dizin ismini alırız. 

result = os.path.dirname(os.path.abspath("first.py")) # bu şekilde ise dosya ismi ile önce tam yolunu buluyor ve o yol ile dizin'i buluyor.

result = os.path.exists("first.py") # true verir eğer path üzerinde varsa bu dosya True verir yoksa False verir.

result =  os.path.isdir("C:/emrea/Documents") # True verir çünkü bir klasör ama değilse klasör harici bir şeyse girilen adresteli dosya o zaman False verir.

result = os.path.join("C:\\","deneme","deneme1","deneme2") # bu şekilde biz bir dosya yolu oluşturabiliriz parça parça. C:\deneme\deneme1\deneme2 şeklinde bir yol üretebiliriz.

result = os.path.split("C:\\deneme") # bu şekilde yolu bölebiliriz bir liste return eder bize.

result = os.path.splitext("first.py") # dosyanın ismi ile uzantısını ayırır. iki parça haline getirir. first ve .py olarak ayırır.

.........................................................

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///Pythonda regular expression modulü//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import re ile import edilir. genel olarak arama için kullanılır. regular expression olarak geçer. arama kriteri belirtiriz bir input alırız bu bir mail olabilir mi gibi sorgular yapabiliriz. 

print(dir(re)) # ile tüm metotları classları vs görebiliriz.
.................................................................
str = "Python Kursu: Python Programlama Rehberiniz | 40 saat"

result = re.findall("Python",str) # bize bir liste halinde Python elemanlarını yani aranan elemanı döner.   
print(len(result)) # listede kaç eleman varsa bize döner. lene ile kaç tane eleman olduğunu görebiliriz. 
   result = len(result) yapabiliriz. böylece tek seferde bir değişkende görebiliriz kaç tane eleman var diye. çünkü pythonda bir veri birden fazla değişken tipini alabilir bir sorun olmaz.
.................................................................

import re
str = "Python Kursu: Python Programlama Rehberiniz | 40 saat" 

result = re.split(eleman,str) #elemana göre stryi böler ve bize bir liste halinde elemanları döner. klasik bir split aslında.

.................................................................
import re
str = "Python Kursu: Python Programlama Rehberiniz | 40 saat"

result = re.sub(" ","-",str) # böylece bütün boşlukları - yapacak ve yapılmış hali return edecek.
    boşluk karakter \s ile de ifade edilebilir.

result = re.search("Python",str) #  bize bir Match classı döner.  
#result = result.span() ile hangi indexler arasında olduğunu döndürür. (0,6) gibi.
#result = result.start() hangi indexten başlamış aranan karakter onu görebiliriz.
#result = result.end() bitiş karakterinin indexini getirir.
#result = result.group() bulduğu ifadeyi bize gönderir.
#result = result.string hangi ifadeyi sorgulamak için gönderdik bize gösterir. "Python Kursu: Python Programlama Rehberiniz | 40 saat" bunu dönderir.  str kısmını yollar bize.

.................................................................
.................................................................

[] - re modumülü ile işlme yapacağımız zaman köşeli parantezlere arasına eklenen karakterler aranır.

[abc] mesela o zaman a b c aranır 
[a-e] [abcde] a b c d e aranır mesela.
[1-5] [12345] anlamına gelir.

[^abc] abc dışındaki karakterler.
[^1-9] [123456789] dışındaki karakterler ^ ile dışındaki anlamı katarız.

str = "Python Kursu: Python Programlama Rehberiniz | 40 saat" 

result = re.findall("[abc]",str) # böylece bulduğu tüm a b c karakterlerini döner eğer varsa...
result1 = re.findall("[sat]",str) # s a t karakterlerinin hepsini arar ve var olanları bir listeye koyar.
result2 = re.findall("[a-e]",str) a b c d e karakterlerini arar. ve olanları bir listeye koay spnra ise return eder.
result3 = re.findall("[1-5]",str) 1 2 3 4 5 rakamlarının hepsini arar olanları bir liste içinde return eder. mesela str'de 3 tane 5 var o zaman listede de 3 tane 5 olacak.
result = re.findall("^[abc]",str) a b c karakterleri haricinde karakterleri alır.
.................................................................
str = "Python Kursu: Python Programlama Rehberiniz | 40 saat" 

re modulünde . tek karakteri temsil eder ..(gt gibi) iki karakterli bir cümle ...(gtr gibi) üç karakterli bir str 

mesela .. olsun a no match olur ab 1 match abc 1 match abcd 2 match olur. noktalar ile karakter belirtmesi yaparız.
.............
import re

str = "emreaytas"
result = re.findall("..",str)
print(result) #['em', 're', 'ay', 'ta'] burada olan şu kaç karakter girersek eğer ona göre yapabildiği kadar bölrek 2 2 karakterleri alıp atıyor.
...............
import re

str = "emreaytas"
result = re.findall("..",str)
print(result) #['em', 're', 'ay', 'ta'] burada olan şu kaç karakter girersek eğer ona göre yapabildiği kadar bölrek 2 2 karakterleri alıp atıyor.
result1 = re.findall("[^a]",str)
print(result1) #['e', 'm', 'r', 'e', 'y', 't', 's'] a herfi harici tüm değerler geldi.
result2 = re.findall("^a",str) # no match olur nedeni ise o karakter ile başlamamış. eğer sadece "^" koyarsak o zaman belirtilen str bir karkterle başlamış mı onu sorgularız.
print(result2)
result3 = re.findall("t$",str) # bunun anlamı belirtilen karakterle bitiyor mu bunu sorgularız. sadece karakter değil "att$" yaparsak son karakterleri att mi sorgularız.
print(result3) 
...............

.................................................................
.................................................................

DEVAM EDİLECEK: BTK AKADEMİ RE MODÜLÜ KISMINDAN....

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///JSON MODÜLÜ//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import json ile çağırırız. json modülünü. sadece pythona özgü değil cihazlar arası ortak veri taşıma yönetimidir.
json veri türü dcit veri türü gibidir. bir uygulamatya bu verileri tyaşoyabiliriz her yapı bunu algılayabiliriz ortak veri taşıma yapısıdır.

person = {"name":"emre","languages": ["python","c#"]} 
result = person["name"] #emre döner bize.
result1 = person["languages"][0] python döner.
....................................................
biz jsonu aslında string halinde bir dict oalrak kullanacağız. "{"name":"emre","languages": ["python","c#"]}" gibi mesela. json bize string olan ama içeriği dict olacak.
person = {"name":"emre","languages": ["python","c#"]} 

json string to dict olarak kullanmamız lazım. bize dictler str içerisinde gelecekler.
result = json.loads(person) yaparsak eğer bize str bir dict olarak gelecek.
result1 = result["name"] yaparak emre'ye ulaşabiliriz.
.......................................................
mesela bir .json dosyası içerisinde {"name":"emre","languages": ["python","c#"]}  bilgisi var

import json

with open("person.json","r") as file:
    data = json.load(f)
    print(data) # {"name":"emre","languages": ["python","c#"]} verir
    print(data["languages"][1]) # c# döner..
  
........................................................

mesela elimizde bir dict bilgisi var ve biz bunu json'a yollamamız lazım örnek olarak.

import json 
person = {"name":"emre","languages": ["python","c#"]}

result = json.dump(person)
print(result) # "{}"name":"emre","languages": ["python","c#"]}" haline geldi bir str oldu... dict to json string...
........................................................
import json
person = {"name":"emre","languages": ["python","c#"]}

with open("person.json","w") as file:
    json.dump(person,file) # böylece bir string olarak dict bilgisini json dosyasına yolladı.
........................................................

import json

person_str = "{"name":"emre","languages": ["python","c#"]}"

person_dict = json.loads(person_str) 
result = json.dumps(person_dict,indent = 4,sort_keys = True) # böylece dumps ile yapılandırma yapabildik... sort keys ile keyleri alfabe vs'ye göre sıralarız. ve indent ile ise boşluk vs bırakabiliriz.
print()
........................................................
load ve loads ile biz verileri alırız dump ile ise çevirebiliriz.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
pass ile boş bölge olmadan atlama yaptırabiliriz.
mesela bir fonksiyona nesne yollayacağız bunun hangi tipten olduğunu def register(self,user:User): User class'ı tipinden gelecek veri user olarak kullanılacak demektir.
bazen tek tırnaklar içerisinde çift tırnak kullanmak gerekir. mesela tek '   "..." "..." "..." ' yapabiliriz burada en kapsayıcı ' ' olur tek tersi durumda ise " " kapsayıcı ana string olur.

///request modulü//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mesela json re datetime os mödülleri python ile gelen mödüllerdir. biz pip install requests dedik ve bu mödül bizim python lib kısmımıza bir dosya olarak geldi.
import json
print(json.__file__) __file__ ile bir modülün yerini dosya yolunu görebiliriz. genel olarak pyhon lib klasöründeler. kendimizde hazırlayıp modül ekleyebiliriz.

ancak tüm modüller dll şeklinde pcde bulunur bunlar c dili ile yazılıp kütüphane haline getirilir.

kendimizin yüklemesi gereken kütüphaneler gerekebilir. python için bulunan paketler fazlası ile vardır. 

vscode terminaline pip --version yazarsak eğer bize elde olan pyhon'un versiyonunu verir. eğer paket yüklemek istersek eğer pypi.org'uı kullanmamız lazım.

pip install paketadi(requests) gibi yaparsak eğer paketi bize dahil eder.
pip list ile elde var olan mödülleri görebiliriz. mesela eklediğpimiz requests gözüktü.
..........................................

import requests diyerek çağırırız. bunun ile http requesti atabiliriz. 

mesela https://jsonplaceholder.typicode.com/todos sayfası bize çok fazla değeri olan json string sunar.

import requests
result = requests.get("https://jsonplaceholder.typicode.com/todos") # bize bir sonuç dönecek ve biz bunu bir değişkene atadaık.
result1 = result.text# bunu yaparsak eğer o zmaan bir text oalrak görürüz sonucu. bize bir string bilgi verdi.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


####################################################################################################################################################################################################################################################################################################################################