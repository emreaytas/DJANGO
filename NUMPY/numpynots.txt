####################################################################################################################################################################################################################################################################################################################################

//NUMPY nedir...///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
veri analazi için çok gerekli bir kütüphanedir...
pip install numpy diyerek pythonun lib kısmına yükleriz... pip list ile kontrol edebiliriz. yüklenmiş mi yüklenmemiş mi diye...

normalde listelerin yapamadığnı numpy ile yapabilriz. hızlı çalışır ve büyük veriler ile çallışırken çok işimize yarar hızlı ve etkili çalışır... numpy az yer kaplar ayrıca. ve daha hızlıdır. c'deki dizi mantığı ile çalışır...

import numpy diyerek çağırırız... import numpy as np diyerek np ismi ile kullanabiliriz...
numpyde'bize dizi mantığı ile hareket edeceğiz...

numpy.metot() diyerek kullanabiliriz...

np_array = np.array([1,2,3,4,5,6,7,8,9]) # bir liste içerisinde yolladık yoksa her bir elemanı farklı bir liste olarak kabul eder bu yüzden liste içerisinde yolladık mnpy bunları bir array içerisine atayacak...
print(type(np_array)) # <class 'numpy.ndarray'> olarak görürüz...

...............................................................................................

import numpy as np

#pyton list
py_list = [1,2,3,4,5,6,7,8,9]

np_array = np.array([1,2,3,4,5,6,7,8,9])

print(type(py_list)) # list verir...
print(type(np_array)) # numpy ndarray verir...

py_multi = [[1,2,3],[1,2,3],[1,2,3]] # liste ve her elemanı bir liste bu yüzden bir çok boyut oluşturabildik...

np_multi = np_array.reshape(3,3) # 3 satir 3 sutun çok boyutlu dizi yapabiliriz...

print(np_array.ndim) # 1 boyutlu diye 1 verir...
print(np_multi.ndim) # 2 boyutlu diye 2 verir...

print(np_array.shape) # (9,) verir...
print(np_multi.shape) # (3,3) verirr

................................................................................................

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Numpy dizileri ile çalışma...///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import numpy as np

result = np.array([1,3,5,7,9])
result1 = np.arange(1,10) # 1 10 arası 10 dahil değil... 1 2 3 4 5 6 7 8 9 elemanarındanoluşan bir dizi olur..
result2 = np.arange(10,100,3) #3er 3er artacak ve bir dizi oluşacak... 100 dahil değil range gibii...
result3 = np.zeros(10) # 10 elemanıda 0 olan bir dizi olur... her eleman float  
result4 = np.ones(10) # 10 elemanıda 1 olan bir dizi olur... her eleman float
result5 = np.linspace(0,100,5) # başlangıç ve bitiş noktasını eşit aralıklar ile böler... 0 25 50 75 100 gibi 5 tane parça oluşur bu aralıkta başlangıç ve bitiş dahildir...
result6 = np.linspace(0,5,5) #0 1.25 25 3.75 5 olarak 5 parça elde ederiz...
result7 = np.random.randint(0,10) # 10 dahil ddeğil max 9 olacak şekilde. eğer randint(20) dersek min değeri 0 olarak kabul eder... sadece bir değer gelir...
result8 = np.random.randint(1,10,3) # min 1 max 9 3 tane değer gelecek...
result9 = np.random.randn(5) # eksi değerlerde katılır...
result10 = np.arange(50) # 0 1 2 .... 49.  50 elemanlı bir dizi..
result10 = result10.reshape(5,10) # bununla resul10 çift katlı bir array oldu... elemanlarını ise sırası ile 10 10 olarak böldü...
print(result10.sum(axis=1)) # axis = 1 olursa satırların toplamını sıfır olursa sutunların toplamini verir...

result11 = np.random.randint(1,100,10)
print(result11.max()) # en buyuk degeri buluruz... min ile ise en kcuuk degeri buluruz... 
print(result11.mean()) # ortalamayı verir...
print(result11.argmax()) # üretilen en buyuk sayının indexini verir... argmin() ile ise en kucuk sayinin indexini verir...

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////numpy dizilerinin indexlenmesi.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import numpy as np

numbers = np.array([0,5,10,15,20,25,50,75])

result = numbers[5] #5. indexteki elemanı getirir...
result2 = numbers[-1] # en sondaki elemanı getirir...
result3 = numbers[0:3] # 0 1 2. indexlerdeli elemanları bir listeye koyar ve getirir... liste indexleme gibi...
result4 = numbers[3:] # 3. index dahil sona kadar olan elemanları bir listeye atar...
result5 = numbers[::-1] # arrayi ters çevirebiliriz...
result6 = np.array([[1,2,3],[4,5,6],[7,8,9]]) # bir matris oluşur burada...

result10 = result6[0]# bu durumda ilk satırı getirir bize... eğer result6[1] olursa ikinci satırı getirir...
print(result6[1,1]) # ikinci arrayin ikinci değerini alırız... matrislerde işlem böyle olur...
print(result6[:,2]) # tüm satıların. 2. kolonundaki değerleri getirir...
print(result6[:,0:2]) # her satırın 0 ile 2. index arasını getirir. yani 0 ve 1. indexlerdeli elemanlarını getirir...
print(result6[-1,:]) # son satirdaki tüm değerleri alırız böylece...
print(result6[:2,:2]) # 1. ve 2. satirin 1. ve 2. değerlerini getirir... virgül ile satır sutun ayrımı yapabiliriz.
   
    [:,:] virgül ile satır sutun işlemlerini ayırırız. : ile ise aralık vs belirleriz...

arr1 = np.arange(0,10)
arr2 = arr1 # referans kopyalama yaprık... arr2 üzerinde yapacağımız işlem direkt olarak arr1'ede etki eder...
arr2[0] = 1 # arr1 ve arr2 'nin ilk elemanı 1 olur...

arr3 = np.arange(0,10)
arr4 = arr3.copy() # böyle olursa eğer referans kopyalaması değil direkt olarak değerlerini alır.. arr4'te yapacağımız değişim arr3'ü etkilemez... genel olarak referans işlemleri işte. copy ile içerik kopyalama yaparız...

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////Numpy dizi operasyonları.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import numpy as np

numbers1 = np.random.randint(10,100,6)
numbers2 = np.random.randint(10,100,6)

print(numbers1)
print(numbers2)

result = numbers1 + numbers2 # iki dizinin aynı indextek elemanlarını toplar ve bir dizi oluşturur en uzun dizinin uzunluğunda olur...
result1 = result + 10 # bunu yaparsak her eleman 10 artar... - 10 dersek her eleman 10 azalır...
result2 = numbers1 - numbers2 # aynı indexteki elemanlar birbirleri arasında işlem görür... numbers1'in elemanlarında numbers2'nin elemanları çıkartılır...
result3 = numbers2 / numbers1 # her eleman birbiri arasında indexe göre bölünür...numbers2'nin elemanları numbers1'in elemanlarına bölünür...
result4 = np.sin(numbers1) # her elemanın sinus değerini alır ve bir dizi oluşturur...
result5 = np.cos(numbers2) # her elemanın cosinus değerini alır ve bir dizi oluşturur...
result6 = np.sqrt(numbers1) # her elemanın karekökünü alır ve bir dizi oluşturur...
result7 = np.log10(numbers1) # her elemanın log10 tabanındaki değerini alır ve bir dizi oluşturur...

newarray = numbers1.reshape(2,3)
newarray1 = numbers2.reshape(2,3)

newmatris1 = np.vstack((newarray,newarray1)) # tek bir parametre olarak gönderdik ve dikey olarak birleştirme yaptı...
newmatris2 = np.hstack((newarray,newarray1)) # yatay olarak matris birleştirmesi yaptı...

result8 = numbers1 >= 5 # bir dizi oluşturur değerler boolean tipinden olur ve eğer eleman 5 ve 5ten büyüsek True değilse False verir...
result9 = numbers2 % 2 == 0 # bir dizi oluşturur değerler boolean tipinden olur ve eğer eleman 2'ye bölünürse False 0 yani değilse True alır...

print(numbers1[result9]) # bize koşulu sağlayan değerleri bir liste içerisine atar ve geri return eder... 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

####################################################################################################################################################################################################################################################################################################################################